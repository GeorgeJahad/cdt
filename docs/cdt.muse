#title CDT - The Clojure Debugging Toolkit

** What is it?

The CDT, (Clojure Debugging Toolkit,) is a set of clojure functions/macros that use the Java Debug Interface, http://java.sun.com/javase/6/docs/jdk/api/jpda/jdi/index.html, to debug a remote vm, from a repl running on another vm.

You can set breakpoints, catch exceptions, examine the stack
frame/locals; what makes it unique, (afaik,) is that you can eval
arbitrary clojure forms in the lexical scope of a suspended,
remote-thread's stack frame.

For example, if you are suspended at a stack frame that has the locals *a* and *b*,
*(reval (+ a b))* will return their sum.

** What about debug-repl?
The debug-repl, http://github.com/georgejahad/debug-repl, 
is a dead simple interface that allows you to debug Clojure in the
most natural way possible, a repl that is aware of it's surrounding
lexical scope.  

In general it works very well, with two exceptions:

1. You can't traverse the stack examining locals.

2. It can be hard to  invoke from the point where an exception is thrown.

For those kinds of issues I use CDT; otherwise, I still use
debug-repl.  

** CDT Exception Example
I often have trouble getting my namespace declarations right.  I do
things like this:

<example>
user=> (ns xx (:use [clojure.contrib.pprint :only pprint]))
java.lang.IllegalArgumentException: Don't know how to create ISeq from: clojure.lang.Symbol (NO_SOURCE_FILE:16)
</example>

Any idea what symbol it is complaining about?  Me neither.  To debug
it, start the target repl up with these extra jvm args:

<example>
-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8030
</example>

Start up a second repl and init the debugger like so:

<example>
user=> (use 'com.georgejahad.cdt)
nil
user=> (cdt-attach 8030)
nil
starting event handler
user=> (set-catch java.lang.IllegalArgumentException :all)
catch set on java.lang.IllegalArgumentException
</example>


Now that you are catching the exception, reinvoke it from the target
repl again;  that repl will hang, without printing the exception.  On
the debugger repl, run the following:


<example>
user=> 

Exception #<ExceptionEventImpl ExceptionEvent@clojure.lang.RT:471 in thread main> #<LocationImpl clojure.core$load_lib:4752> hit


(print-frames)
  0 clojure.lang.RT seqFrom [coll sc c] RT.java:471
  1 clojure.lang.RT seq [coll] RT.java:452
  2 clojure.core$seq invoke [coll] core.clj:122
  3 clojure.core$refer doInvoke [ns ns_sym filters rename exclude fs nspublics to_do] core.clj:3268
  4 clojure.lang.RestFn applyTo [args] RestFn.java:140
  5 clojure.core$apply invoke [f x args] core.clj:542
  6 clojure.core$load_lib doInvoke [prefix options lib opts map__4461 verbose use require reload_all reload as loaded load need_ns filter_opts] core.clj:4769
  7 clojure.lang.RestFn applyTo [args] RestFn.java:143
  .
  .
  .

user=> (locals)
coll pprint
sc clojure.lang.AFn
c clojure.lang.Symbol
nil
user=> (reval (type coll))
clojure.lang.Symbol

</example>

Suspiciously, there is a local *coll* whose value is pprint.
*(reval (type coll))* reports it's a symbol.  Sounds like that
could be the ISeq the exception message is complaining about.  Delete
the catch and resume the target:

<example>
user=> (delete-catch java.lang.IllegalArgumentException )
{}
user=> (cont)
</example>

Wrap the pprint in a vector and see that it fixes the
problem.

** Caveat - False Nulls/Locals Clearing?
One major weakness of CDT I've found is that
sometimes valid non-null locals appear null.  I've seen this
problem with JDB as well, so I don't think it is a CDT
problem per se; I suspect it's an unpleasant side-effect of the "locals clearing"
the compiler does to reduce the danger of head-holding lazy seqs:
http://groups.google.com/group/clojure/msg/9b4e268b85c20cd6%29

I'm not sure there's a workaround, but if you go up or down the stack
frame you can sometimes find other copies of the var that actually do show its
correct value. 

** reval-println
*reval* is written to return a valid form that can be manipulated by the
debugger repl.  

<example>
user=> (locals)
a [1 2]
nil
user=> (def remote-a-inced (map inc (reval a)))
#'user/remote-a-inced
user=> remote-a-inced
(2 3)
</example>


Not all remote forms are readable however; for this case, use
*reval-println* to print out the string representing the unreadable
form, like so:

<example>
user=> (reval #(* 2 3))
java.lang.RuntimeException: java.lang.Exception: Unreadable form (NO_SOURCE_FILE:0)
user=> (reval-println #(* 2 3))
"#<user$eval71$fn__72 user$eval71$fn__72@16a8823>"
</example>


** Other useful commands
*(up)* and *(down)* traverse the stack.

*(local-names)* just prints
the names of the locals and closures.  This is useful in case one
of the locals is a long seq you don't want to print out.

Set/delete breakpoints like so: *(set-bp clojure.core/into)*  *(delete-bp
clojure.core/into)*


** Other caveats
*** Dynamic bindings are only correct in frame 0
*reval* is always invoked in the context of frame 0 on a suspended
thread.  The lexical scope for other frames is handled by
pulling them out of the jdi and passing them back into reval when it
is invoked.  Because dynamic bindings are a clojure construct, the jdi
doesn't know when they get set, so they can't be simulated.
Thus reval'ing a form that depends on a dynamic binding
will only be correct in frame 0.

*** Locals from Java source files
 are only available when compiled with -g

*** Haven't tested on Windows
Outside of the caveats mentioned above, CDT seems to work fine on Linux and OSX.

** Still Undone
 stepping, modification of locals, source listings/ide integration, linenumber breakpoints, debugging local vm

** Where:
http://github.com/georgejahad/cdt

http://clojars.org/cdt

** Thanks
To my employer Runa for supporting my Clojure habit, and to Rich for
making all the great toys.

** Comments/Suggestions

Send any comments/suggestions to George Jahad at "george-clojure at blackbirdsystems.net" or to the main clojure mailing list: http://groups.google.com/group/clojure

